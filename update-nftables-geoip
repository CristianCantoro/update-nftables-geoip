#!/bin/bash
# shellcheck disable=SC2128
SOURCED=false && [ "$0" = "$BASH_SOURCE" ] || SOURCED=true

# set PATH to a sane default
PATH='/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'

if ! $SOURCED; then
  set -euo pipefail
  IFS=$'\n\t'
fi

#################### helpers
function rerun_as_root() {
  if [ "$(id -u)" -ne "0" ]; then
    (>&2 echo "Warning: This script will be re-run as root.")
    args="$(echo "$*" | tr $'\n' ' ')"
    exec sudo -E su 'root' -c "/bin/bash $0 $args"
    exit 0
  fi
}
#################### end: helpers

#################### help
SCRIPTNAME=$(basename "$0")
function short_usage() {
  (>&2 echo \
"Usage:
  $SCRIPTNAME [options] [-c <config>]
  $SCRIPTNAME -h")
}

function usage() {
  short_usage
  (>&2 echo \
"
Update nftables' IP addresses geolocation.

Options:
  -d              Print debug information (implies -v).
  -n              Do not output any file.
  -h              Show this help and exits.

Example:
  $SCRIPTNAME")
}
#################### end: help

rerun_as_root "$@" --
(>&2 echo -en "[$(date '+%F %H:%M:%S')][notice]\\t" )
(>&2 echo "Start nftables geoip uppdate." )

#################### Options
debug=false
dry_run=false

while getopts ":dhn" opt; do
  case $opt in
    d)
      debug=true
      ;;
    h)
      usage
      exit 0
      ;;
    n)
      dry_run=true
      ;;
    \?)
      (>&2 echo "Error: invalid option $1")
      usage
      exit 1
      ;;
    :)
      (>&2 echo "Error.Option -$OPTARG requires an argument.")
      exit 1
      ;;
  esac
done

if $debug; then
  function echodebug() {
    (>&2 echo -en "[$(date '+%F %H:%M:%S')][debug]\\t" )
    (>&2 echo "$@" )
  }
else
  function echodebug() { true; }
fi

function echonotice() {
  (>&2 echo -en "[$(date '+%F %H:%M:%S')][notice]\\t" )
  (>&2 echo "$@" )
}


if $dry_run; then
  function run() {
    echodebug '(dry-run)' "$@"
    true -- "$@"
  }
else
  function run() {
    echodebug '(run)' "$@"
    "$@"
  }
fi
####################

echodebug 'Options:'
echodebug " * debug (-d): $debug"
echodebug " * dry_run (-n): $dry_run"

NFT_GEOIP_FILES_DIR='/etc/nftables.d/geoip-tables'

run /usr/local/bin/nft_geoip.py \
      --file-location '/etc/nftables-geoip/location.csv' \
      --download \
      --output-dir "$NFT_GEOIP_FILES_DIR"

# reload docker
if systemctl is-active docker >/dev/null; then
  run systemctl reload docker
fi

if $dry_run; then
  echonotice "nftable geoip tables not changed, dry run."
else
  echonotice "nftable geoip tables updated successfully."
fi

echonotice 'Reloading nft tables ...'
run /etc/nftables.conf
echonotice 'nft tables reloaded.'
exit 0
